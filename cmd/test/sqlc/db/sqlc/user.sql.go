// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
)

const createuser = `-- name: Createuser :one
INSERT INTO users (
	name, bio
) VALUES (
	$1, $2
)
RETURNING id, name, bio
`

type CreateuserParams struct {
	Name string
	Bio  sql.NullString
}

func (q *Queries) Createuser(ctx context.Context, arg CreateuserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createuser, arg.Name, arg.Bio)
	var i User
	err := row.Scan(&i.ID, &i.Name, &i.Bio)
	return i, err
}

const deleteuser = `-- name: Deleteuser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) Deleteuser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteuser, id)
	return err
}

const getuser = `-- name: Getuser :one
SELECT id, name, bio FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) Getuser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getuser, id)
	var i User
	err := row.Scan(&i.ID, &i.Name, &i.Bio)
	return i, err
}

const listusers = `-- name: Listusers :many
SELECT id, name, bio FROM users
ORDER BY name
`

func (q *Queries) Listusers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listusers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.ID, &i.Name, &i.Bio); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
